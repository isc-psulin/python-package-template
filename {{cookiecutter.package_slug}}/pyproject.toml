[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ cookiecutter.package_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.description }}"
readme = "README.md"
requires-python = "{{ cookiecutter.python_requires }}"
license = { text = "{{ cookiecutter.license }}" }
authors = [
    { name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}" },
]
keywords = []
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: {{ cookiecutter.license }} License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = []

[project.optional-dependencies]
dev = [
    {% if cookiecutter.use_black == "y" %}"black",{% endif %}
    {% if cookiecutter.use_isort == "y" %}"isort",{% endif %}
    {% if cookiecutter.use_flake8 == "y" %}"flake8",{% endif %}
    {% if cookiecutter.use_mypy == "y" %}"mypy",{% endif %}
    {% if cookiecutter.use_pytest == "y" %}"pytest",
    "pytest-cov",{% endif %}
]

[project.urls]
Homepage = "{{ cookiecutter.repository_url }}"
Repository = "{{ cookiecutter.repository_url }}"
Issues = "{{ cookiecutter.repository_url }}/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/{{ cookiecutter.package_slug }}"]

[tool.hatch.build.targets.sdist]
include = [
    "src/{{ cookiecutter.package_slug }}",
    "tests",
    "README.md",
    "LICENSE",
]

{% if cookiecutter.use_black == "y" %}
[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
{% endif %}

{% if cookiecutter.use_isort == "y" %}
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
{% endif %}

{% if cookiecutter.use_mypy == "y" %}
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
{% endif %}

{% if cookiecutter.use_pytest == "y" %}
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/{{ cookiecutter.package_slug }}",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
{% endif %}